#!/usr/bin/env python3
"""
Machine Translation Demo Script
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Machine Translation ‡∏î‡πâ‡∏ß‡∏¢ Python

Author: AI Course Development System
Date: 2025
"""

import time
import warnings
warnings.filterwarnings("ignore")

def demo_basic_translation():
    """Demo 1: ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    print("=" * 60)
    print("Demo 1: ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
    print("=" * 60)
    
    try:
        from transformers import pipeline
        
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
        translator = pipeline("translation", model="Helsinki-NLP/opus-mt-en-th")
        
        test_sentences = [
            "Hello, how are you?",
            "I love learning about machine translation.",
            "Python is a great programming language.",
            "The weather is beautiful today."
        ]
        
        for sentence in test_sentences:
            start_time = time.time()
            result = translator(sentence)
            end_time = time.time()
            
            print(f"EN: {sentence}")
            print(f"TH: {result[0]['translation_text']}")
            print(f"Time: {end_time - start_time:.2f} seconds")
            print("-" * 50)
            
    except ImportError:
        print("Error: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á transformers library")
        print("pip install transformers torch")
    except Exception as e:
        print(f"Error: {str(e)}")

def demo_batch_processing():
    """Demo 2: ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö Batch"""
    print("=" * 60)
    print("Demo 2: ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö Batch")
    print("=" * 60)
    
    try:
        from transformers import pipeline
        import pandas as pd
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        sample_texts = [
            "Artificial intelligence is transforming industries.",
            "Machine learning algorithms can process vast amounts of data.",
            "Natural language processing enables computers to understand human language.",
            "Deep learning models require significant computational resources.",
            "Translation technology has improved dramatically in recent years."
        ]
        
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
        translator = pipeline("translation", model="facebook/nllb-200-distilled-600M")
        
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö batch...")
        start_time = time.time()
        results = translator(sample_texts)
        end_time = time.time()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
        df = pd.DataFrame({
            'English': sample_texts,
            'Thai': [result['translation_text'] for result in results]
        })
        
        print(f"‡πÅ‡∏õ‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {end_time - start_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        print("\n‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
        for i, row in df.iterrows():
            print(f"{i+1}. EN: {row['English']}")
            print(f"   TH: {row['Thai']}")
            print()
            
    except ImportError as e:
        print(f"Error: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á libraries ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô - {str(e)}")
    except Exception as e:
        print(f"Error: {str(e)}")

def demo_evaluation():
    """Demo 3: ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•"""
    print("=" * 60)
    print("Demo 3: ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•")
    print("=" * 60)
    
    try:
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
        predictions = [
            "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á",
            "‡∏â‡∏±‡∏ô‡∏ä‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á",
            "‡πÑ‡∏û‡∏ò‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ"
        ]
        
        references = [
            "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ö‡∏≤‡∏¢‡∏î‡∏µ‡πÑ‡∏´‡∏°",
            "‡∏â‡∏±‡∏ô‡∏£‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á",
            "Python ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏°‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
        ]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BLEU score ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
        def simple_bleu(pred, ref):
            pred_words = pred.split()
            ref_words = ref.split()
            
            # ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            matches = 0
            for word in pred_words:
                if word in ref_words:
                    matches += 1
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì precision
            precision = matches / len(pred_words) if pred_words else 0
            return precision
        
        print("‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•:")
        total_score = 0
        
        for i, (pred, ref) in enumerate(zip(predictions, references)):
            score = simple_bleu(pred, ref)
            total_score += score
            
            print(f"\n‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà {i+1}:")
            print(f"Prediction: {pred}")
            print(f"Reference:  {ref}")
            print(f"Simple BLEU: {score:.4f}")
        
        avg_score = total_score / len(predictions)
        print(f"\n‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_score:.4f}")
        
    except Exception as e:
        print(f"Error: {str(e)}")

def demo_domain_specific():
    """Demo 4: ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏î‡πÄ‡∏°‡∏ô"""
    print("=" * 60)
    print("Demo 4: ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏î‡πÄ‡∏°‡∏ô (‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå)")
    print("=" * 60)
    
    try:
        from transformers import pipeline
        
        class DomainTranslator:
            def __init__(self, model_name, glossary=None):
                self.translator = pipeline("translation", model=model_name)
                self.glossary = glossary or {}
            
            def preprocess(self, text):
                for source, target in self.glossary.items():
                    text = text.replace(source, f"[TERM_{target}]")
                return text
            
            def postprocess(self, text):
                for source, target in self.glossary.items():
                    text = text.replace(f"[TERM_{target}]", target)
                return text
            
            def translate(self, text):
                preprocessed = self.preprocess(text)
                result = self.translator(preprocessed)[0]['translation_text']
                return self.postprocess(result)
        
        # ‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå
        medical_glossary = {
            "diagnosis": "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢",
            "treatment": "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤",
            "symptoms": "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£",
            "patient": "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢",
            "doctor": "‡πÅ‡∏û‡∏ó‡∏¢‡πå"
        }
        
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå...")
        medical_translator = DomainTranslator(
            "Helsinki-NLP/opus-mt-en-th",
            medical_glossary
        )
        
        medical_texts = [
            "The doctor will provide a diagnosis after examining the patient.",
            "The treatment for these symptoms is very effective.",
            "The patient should follow the doctor's instructions carefully."
        ]
        
        print("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå:")
        for text in medical_texts:
            translation = medical_translator.translate(text)
            print(f"EN: {text}")
            print(f"TH: {translation}")
            print("-" * 50)
            
    except ImportError:
        print("Error: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á transformers library")
    except Exception as e:
        print(f"Error: {str(e)}")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£ demo ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("üåê Machine Translation Demo")
    print("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Machine Translation ‡∏î‡πâ‡∏ß‡∏¢ Python")
    print("=" * 60)
    
    demos = [
        ("‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô", demo_basic_translation),
        ("‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö Batch", demo_batch_processing),
        ("‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•", demo_evaluation),
        ("‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏î‡πÄ‡∏°‡∏ô", demo_domain_specific)
    ]
    
    while True:
        print("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Demo ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
        for i, (name, _) in enumerate(demos, 1):
            print(f"{i}. {name}")
        print("0. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        
        try:
            choice = int(input("\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (0-4): "))
            
            if choice == 0:
                print("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
                break
            elif 1 <= choice <= len(demos):
                print(f"\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô: {demos[choice-1][0]}")
                demos[choice-1][1]()
                input("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...")
            else:
                print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                
        except ValueError:
            print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
        except KeyboardInterrupt:
            print("\n‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            break
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

if __name__ == "__main__":
    main()

